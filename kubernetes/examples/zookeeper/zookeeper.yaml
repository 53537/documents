---
apiVersion: v1
kind: ConfigMap
metadata:
  name: zk-scripts
  labels:
    app: zk
data:
  run.sh: |-
    #!/bin/sh
    # Created by Lin.Ru@msn.com
    
    set -e

    home=/opt/zookeeper
    myid=${HOSTNAME##*-}
    data=${ZK_DATA_DIR:-/data/zk}

    CaC(){
        echo $((count++)) > /dev/null
        continue
    }

    # Generate the config only if it doesn't exist
    if [ ! -f $home/conf/zoo.cfg ]
    then
        mcnf=$home/conf/zoo.cfg
        dcnf=$home/conf/zoo_dynamic.cfg

        echo "Generate ZK config"
        {
            echo "dataDir=$data"
            echo "tickTime=${ZK_TICK_TIME:-2000}"
            echo "initLimit=${ZK_INIT_LIMIT:-10}"
            echo "syncLimit=${ZK_SYNC_LIMIT:-5}"

            echo "autopurge.snapRetainCount=${ZK_SNAP_RETAIN_COUNT:-7}"
            echo "autopurge.purgeInterval=${ZK_PURGE_INTERVAL:-24}"
            echo "maxClientCnxns=${ZK_MAX_CLIENT_CNXNS:-20}"
            echo "reconfigEnabled=true"
            echo "standaloneEnabled=${ZK_STANDALONE_ENABLED:-false}"
            echo "admin.enableServer=${ZK_ADMINSERVER_ENABLED:-false}"
            echo "4lw.commands.whitelist=${ZK_4LW_COMMANDS_WHITELIST:-ruok}"
            echo "dynamicConfigFile=$dcnf"

            echo "metricsProvider.httpPort=${ZK_METRICS_PORT:-7000}"
            echo "metricsProvider.exportJvmInfo=${ZK_METRICS_JVM_INFO:-true}"
            echo "metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider"
        } >> $mcnf

        count=0
        total=${ZK_INIT_REPLICAS:-3}

        let total--

        while true
        do
            echo "server.$count=zk-$count.`hostname -d`:2888:3888;2181" >> $dcnf
            test $count = $total && test $myid -lt $total && CaC
            test  $myid = $count && break
            CaC
        done
    fi

    echo "$myid" > $data/myid

    test -z "$@" && exec $home/bin/zkServer.sh start-foreground || exec "$@"

---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: zk
spec:
  selector:
    matchLabels:
      app: zk
  minAvailable: 2

---
apiVersion: v1
kind: Service
metadata:
  name: zk
  labels:
    app: zk
spec:
  ports:
  - port: 2181
    name: client
  - port: 2888
    name: server
  - port: 3888
    name: leader-election
  - port: 7000
    name: metrics
  clusterIP: None
  selector:
    app: zk

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zk
spec:
  serviceName: zk
  replicas: 3
  selector:
    matchLabels:
      app: zk
  template:
    metadata:
      annotations:
        prometheus.io/port: "7000"
        prometheus.io/scrape: "true"
      labels:
        app: zk
    spec:
      initContainers:
      - name: init
        image: alpine:3.11
        command:
        - /bin/sh
        - -c
        - mkdir -p /data/zk; chown -v 567. /data/zk
        volumeMounts:
        - name: data
          mountPath: /data
      containers:
      - name: zk
        image: statemood/zookeeper:3.6.0
        imagePullPolicy: Always
        command:
        - /bin/sh
        - -c
        - /opt/bin/run.sh
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        - containerPort: 7000
          name: metrics
        env:
        - name : ZK_INIT_REPLICAS
          value: "3"
        - name : ZK_SERVER_HEAP
          value: "1000"
        readinessProbe:
          exec:
            command:
            - zkOk.sh
          initialDelaySeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - zkOk.sh
          initialDelaySeconds: 10
          timeoutSeconds: 5
        securityContext:
          runAsUser: 567
        volumeMounts:
        - name: data
          mountPath: /data
        - name: scripts
          mountPath: /opt/bin
          readOnly: true
      volumes:
      - name: scripts
        configMap:
          defaultMode: 0755
          name: zk-scripts
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      storageClassName: data
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 20Gi